(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 8.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[     11905,        356]
NotebookOptionsPosition[     10679,        309]
NotebookOutlinePosition[     11034,        325]
CellTagsIndexPosition[     10991,        322]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{
  RowBox[{"base64EncodeTable", "[", "n_", "]"}], ":=", 
  RowBox[{"Which", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"n", "\[Equal]", "0"}], ",", "\"\<=\>\"", ",", 
    "\[IndentingNewLine]", 
    RowBox[{"n", "<", "26"}], ",", "\[IndentingNewLine]", 
    RowBox[{"FromCharacterCode", "[", 
     RowBox[{
      RowBox[{"ToCharacterCode", "[", "\"\<A\>\"", "]"}], "+", "n"}], "]"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{"n", "<", "52"}], ",", "\[IndentingNewLine]", 
    RowBox[{"FromCharacterCode", "[", 
     RowBox[{
      RowBox[{"ToCharacterCode", "[", "\"\<a\>\"", "]"}], "+", "n", "-", 
      "26"}], "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{"n", "<", "62"}], ",", "\[IndentingNewLine]", 
    RowBox[{"FromCharacterCode", "[", 
     RowBox[{
      RowBox[{"ToCharacterCode", "[", "\"\<0\>\"", "]"}], "+", "n", "-", 
      "52"}], "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{"n", "\[Equal]", "62"}], ",", "\"\<+\>\"", ",", 
    "\[IndentingNewLine]", 
    RowBox[{"n", "\[Equal]", "63"}], ",", "\"\<-\>\""}], 
   "\[IndentingNewLine]", "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"base64GroupEncode", "[", "group_", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"f", "=", 
      RowBox[{"Partition", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"IntegerDigits", "[", 
             RowBox[{"#", ",", "2", ",", "8"}], "]"}], "&"}], ",", "group"}], 
          "]"}], "//", "Flatten"}], ",", "6"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"base64EncodeTable", "/@", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"FromDigits", "[", 
          RowBox[{"#", ",", "2"}], "]"}], "&"}], ",", "f"}], "]"}]}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"base64Encode", "[", "byt_", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "b", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"b", "=", "byt"}], ";", "\[IndentingNewLine]", 
     RowBox[{"b", "=", 
      RowBox[{"Join", "[", 
       RowBox[{"b", ",", 
        RowBox[{"Switch", "[", 
         RowBox[{
          RowBox[{"Mod", "[", 
           RowBox[{
            RowBox[{"Length", "[", "b", "]"}], ",", "3"}], "]"}], ",", 
          "\[IndentingNewLine]", "0", ",", 
          RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", "1", ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", "0"}], "}"}], ",", "\[IndentingNewLine]", "2", 
          ",", 
          RowBox[{"{", "0", "}"}]}], "\[IndentingNewLine]", "]"}]}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"StringExpression", "@@", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"base64GroupEncode", "/@", 
         RowBox[{"Partition", "[", 
          RowBox[{"b", ",", "3"}], "]"}]}], "//", "Flatten"}], ")"}]}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"base64Encode", "[", 
  RowBox[{"{", 
   RowBox[{
   "155", ",", "162", ",", "233", ",", "155", ",", "162", ",", "233"}], "}"}],
   "]"}]], "Input"],

Cell[BoxData["\<\"m6Lpm6Lp\"\>"], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\"\<Sm9iIDY2\>\"", "//", "Characters"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"S\"\>", ",", "\<\"m\"\>", ",", "\<\"9\"\>", ",", "\<\"i\"\>", 
   ",", "\<\"I\"\>", ",", "\<\"D\"\>", ",", "\<\"Y\"\>", ",", "\<\"2\"\>"}], 
  "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"base64Encode", "[", 
  RowBox[{"ToCharacterCode", "[", "\"\<Job 66\>\"", "]"}], "]"}]], "Input"],

Cell[BoxData["\<\"Sm9iIDY2\"\>"], "Output",
 CellChangeTimes->{3.55561428788054*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"base64DecodeTable", "[", "c_", "]"}], ":=", 
  RowBox[{"Which", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"FromCharacterCode", "[", "c", "]"}], "\[Equal]", "\"\<-\>\""}], 
    ",", "63", ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"FromCharacterCode", "[", "c", "]"}], "\[Equal]", "\"\<+\>\""}], 
    ",", "62", ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"ToCharacterCode", "[", "\"\<0\>\"", "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}], "\[LessEqual]", "c", " ", 
     "\[LessEqual]", 
     RowBox[{
      RowBox[{"ToCharacterCode", "[", "\"\<9\>\"", "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{"c", "-", 
     RowBox[{
      RowBox[{"ToCharacterCode", "[", "\"\<0\>\"", "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}], "+", "52"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"ToCharacterCode", "[", "\"\<a\>\"", "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}], "\[LessEqual]", "c", " ", 
     "\[LessEqual]", 
     RowBox[{
      RowBox[{"ToCharacterCode", "[", "\"\<z\>\"", "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{"c", "-", 
     RowBox[{
      RowBox[{"ToCharacterCode", "[", "\"\<a\>\"", "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}], "+", "26"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"ToCharacterCode", "[", "\"\<A\>\"", "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}], "\[LessEqual]", "c", " ", 
     "\[LessEqual]", 
     RowBox[{
      RowBox[{"ToCharacterCode", "[", "\"\<Z\>\"", "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{"c", "-", 
     RowBox[{
      RowBox[{"ToCharacterCode", "[", "\"\<A\>\"", "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"FromCharacterCode", "[", "c", "]"}], "\[Equal]", "\"\<=\>\""}], 
    ",", "0"}], "\[IndentingNewLine]", "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"base64GroupDecode", "[", "group_", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"FromDigits", "[", 
       RowBox[{"#", ",", "2"}], "]"}], "&"}], " ", "/@", 
     RowBox[{"Partition", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"IntegerDigits", "[", 
           RowBox[{"#", ",", "2", ",", "6"}], "]"}], "&"}], "/@", "group"}], "//",
         "Flatten"}], ",", "8"}], "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"base64Decode", "[", "str_", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "s", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"s", "=", 
      RowBox[{"ToCharacterCode", "[", 
       RowBox[{"StringReplace", "[", 
        RowBox[{"str", ",", 
         RowBox[{
          RowBox[{
           RowBox[{"n", ":", 
            RowBox[{
             RowBox[{"Except", "[", "\"\<=\>\"", "]"}], "..."}]}], "~~", 
           RowBox[{
            RowBox[{"{", "\"\<=\>\"", "}"}], ".."}]}], "\[Rule]", "n"}]}], 
        "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"base64GroupDecode", "/@", 
        RowBox[{"Partition", "[", 
         RowBox[{
          RowBox[{"base64DecodeTable", "/@", "s"}], ",", "4", ",", "4", ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "1"}], "}"}], ",", 
          RowBox[{"{", "}"}]}], "]"}]}], ")"}], "//", "Flatten"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"base64Decode", "[", "\"\<Sm9iIDY2\>\"", "]"}], "//", 
  "FromCharacterCode"}]], "Input",
 CellChangeTimes->{{3.555614311378693*^9, 3.555614315365052*^9}}],

Cell[BoxData["\<\"Job 66\"\>"], "Output",
 CellChangeTimes->{{3.555614297731805*^9, 3.555614316469083*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
  "base64Decode", "[", 
   "\"\<Sm9iIDY2NTkzNyBzZW50IHRvIHNjaHdpbm4ubWNzLmFubC5nb3YKcGFzc3dvcmQ6IEp2aF\
ZrdHNpCi0tLS0tLS0tLS0gQmVnaW4gU29sdmVyIE91dHB1dCAtLS0tLS0tLS0tLQpFeGVjdXRpbmcg\
L2hvbWUvbmVvc290Yy9uZW9zLTUtc29sdmVycy9zbm9wdC1hbXBsL3Nub3B0LWRyaXZlci5weQpGaW\
xlIGV4aXN0cwpZb3UgYXJlIHVzaW5nIHRoZSBzb2x2ZXIgc25vcHQuCkV4ZWN1dGluZyBBTVBMLgpw\
cm9jZXNzaW5nIGRhdGEuCnByb2Nlc3NpbmcgY29tbWFuZHMuCgoyIHZhcmlhYmxlcywgYWxsIG5vbm\
xpbmVhcgoxIGNvbnN0cmFpbnQsIGFsbCBsaW5lYXI7IDIgbm9uemVyb3MKMSBub25saW5lYXIgb2Jq\
ZWN0aXZlOyAyIG5vbnplcm9zLgoKU05PUFQgNi4yLTI6IEVycm9yIGV2YWx1YXRpbmcgbm9ubGluZW\
FyIGV4cHJlc3Npb25zLgoyIGl0ZXJhdGlvbnMsIG9iamVjdGl2ZSA5Cg==\>\"", "]"}], "//", 
  "FromCharacterCode"}]], "Input",
 CellChangeTimes->{{3.555614322672412*^9, 3.5556143548446198`*^9}}],

Cell[BoxData["\<\"Job 665937 sent to schwinn.mcs.anl.gov\\npassword: JvhVktsi\
\\n---------- Begin Solver Output -----------\\nExecuting \
/home/neosotc/neos-5-solvers/snopt-ampl/snopt-driver.py\\nFile exists\\nYou \
are using the solver snopt.\\nExecuting AMPL.\\nprocessing data.\\nprocessing \
commands.\\n\\n2 variables, all nonlinear\\n1 constraint, all linear; 2 \
nonzeros\\n1 nonlinear objective; 2 nonzeros.\\n\\nSNOPT 6.2-2: Error \
evaluating nonlinear expressions.\\n2 iterations, objective 9\\n\"\>"], \
"Output",
 CellChangeTimes->{{3.5556143279734783`*^9, 3.55561435525807*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"base64Encode", "[", 
  RowBox[{
  "ToCharacterCode", "[", 
   "\"\<The quickCode brown fox jumps over the lazy dog\>\"", "]"}], 
  "]"}]], "Input"],

Cell[BoxData["\<\"\
VGhlIHF1aWNrQ29kZSBicm93biBmb3gganVtcHMgb3ZlciB0aGUgbGF6eSBkb2c=\"\>"], \
"Output",
 CellChangeTimes->{3.555614359305635*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
  "base64Decode", "[", 
   "\"\<VGhlIHF1aWNrQ29kZSBicm93biBmb3gganVtcHMgb3ZlciB0aGUgbGF6eSBkb2c=\>\"",
    "]"}], "//", "FromCharacterCode"}]], "Input",
 CellChangeTimes->{{3.555614362748951*^9, 3.55561436562033*^9}}],

Cell[BoxData["\<\"The quickCode brown fox jumps over the lazy dog\"\>"], \
"Output",
 CellChangeTimes->{3.555614365981112*^9}]
}, Open  ]]
},
WindowSize->{520, 639},
WindowMargins->{{Automatic, 44}, {Automatic, 0}},
FrontEndVersion->"8.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (November 6, \
2010)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[557, 20, 1114, 25, 178, "Input"],
Cell[1674, 47, 817, 24, 88, "Input"],
Cell[2494, 73, 1117, 29, 163, "Input"],
Cell[CellGroupData[{
Cell[3636, 106, 171, 5, 27, "Input"],
Cell[3810, 113, 43, 0, 27, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3890, 118, 74, 1, 27, "Input"],
Cell[3967, 121, 204, 4, 27, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4208, 130, 120, 2, 27, "Input"],
Cell[4331, 134, 84, 1, 27, "Output"]
}, Open  ]],
Cell[4430, 138, 2068, 49, 223, "Input"],
Cell[6501, 189, 605, 18, 88, "Input"],
Cell[7109, 209, 1023, 28, 133, "Input"],
Cell[CellGroupData[{
Cell[8157, 241, 189, 4, 27, "Input"],
Cell[8349, 247, 107, 1, 27, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[8493, 253, 800, 13, 223, "Input"],
Cell[9296, 268, 593, 8, 283, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[9926, 281, 171, 5, 58, "Input"],
Cell[10100, 288, 145, 3, 43, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[10282, 296, 252, 6, 58, "Input"],
Cell[10537, 304, 126, 2, 27, "Output"]
}, Open  ]]
}
]
*)

(* End of internal cache information *)

